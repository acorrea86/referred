// Code generated by capnpc-go. DO NOT EDIT.

package capnp_go

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type ProfileInfo capnp.Struct

// ProfileInfo_TypeID is the unique identifier for the type ProfileInfo.
const ProfileInfo_TypeID = 0x8a503fa7e67df7c4

func NewProfileInfo(s *capnp.Segment) (ProfileInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return ProfileInfo(st), err
}

func NewRootProfileInfo(s *capnp.Segment) (ProfileInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return ProfileInfo(st), err
}

func ReadRootProfileInfo(msg *capnp.Message) (ProfileInfo, error) {
	root, err := msg.Root()
	return ProfileInfo(root.Struct()), err
}

func (s ProfileInfo) String() string {
	str, _ := text.Marshal(0x8a503fa7e67df7c4, capnp.Struct(s))
	return str
}

func (s ProfileInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProfileInfo) DecodeFromPtr(p capnp.Ptr) ProfileInfo {
	return ProfileInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProfileInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProfileInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProfileInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProfileInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ProfileInfo) UserId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ProfileInfo) HasUserId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ProfileInfo) UserIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ProfileInfo) SetUserId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ProfileInfo) Username() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ProfileInfo) HasUsername() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ProfileInfo) UsernameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ProfileInfo) SetUsername(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ProfileInfo) IsActive() bool {
	return capnp.Struct(s).Bit(0)
}

func (s ProfileInfo) SetIsActive(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s ProfileInfo) Reward() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s ProfileInfo) SetReward(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// ProfileInfo_List is a list of ProfileInfo.
type ProfileInfo_List = capnp.StructList[ProfileInfo]

// NewProfileInfo creates a new list of ProfileInfo.
func NewProfileInfo_List(s *capnp.Segment, sz int32) (ProfileInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[ProfileInfo](l), err
}

// ProfileInfo_Future is a wrapper for a ProfileInfo promised by a client call.
type ProfileInfo_Future struct{ *capnp.Future }

func (f ProfileInfo_Future) Struct() (ProfileInfo, error) {
	p, err := f.Future.Ptr()
	return ProfileInfo(p.Struct()), err
}

type ProfileWallet capnp.Struct

// ProfileWallet_TypeID is the unique identifier for the type ProfileWallet.
const ProfileWallet_TypeID = 0xf7cfb2016e0a2a00

func NewProfileWallet(s *capnp.Segment) (ProfileWallet, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ProfileWallet(st), err
}

func NewRootProfileWallet(s *capnp.Segment) (ProfileWallet, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ProfileWallet(st), err
}

func ReadRootProfileWallet(msg *capnp.Message) (ProfileWallet, error) {
	root, err := msg.Root()
	return ProfileWallet(root.Struct()), err
}

func (s ProfileWallet) String() string {
	str, _ := text.Marshal(0xf7cfb2016e0a2a00, capnp.Struct(s))
	return str
}

func (s ProfileWallet) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProfileWallet) DecodeFromPtr(p capnp.Ptr) ProfileWallet {
	return ProfileWallet(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProfileWallet) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProfileWallet) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProfileWallet) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProfileWallet) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ProfileWallet) UserId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ProfileWallet) HasUserId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ProfileWallet) UserIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ProfileWallet) SetUserId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ProfileWallet_List is a list of ProfileWallet.
type ProfileWallet_List = capnp.StructList[ProfileWallet]

// NewProfileWallet creates a new list of ProfileWallet.
func NewProfileWallet_List(s *capnp.Segment, sz int32) (ProfileWallet_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ProfileWallet](l), err
}

// ProfileWallet_Future is a wrapper for a ProfileWallet promised by a client call.
type ProfileWallet_Future struct{ *capnp.Future }

func (f ProfileWallet_Future) Struct() (ProfileWallet, error) {
	p, err := f.Future.Ptr()
	return ProfileWallet(p.Struct()), err
}

const schema_93814030c230a561 = "x\xdad\x8f\xbdJ\x03A\x14\x85\xcf\xb9\xb31\x92\x1f" +
	"\xc8\xb0\x0b\xfa\x0c\x82\x1a\xb1K\xb3\xb1\x8cU\xa6\xb2\xb1" +
	"Y\x92\x09\x066\x9be\x92\xa8\x85\x16\xb6\xb6\xbe\x81 " +
	"\xf6>\x82\xd8[\xf9\x00\x16jm\x15\x14teR\x04" +
	"\xd1\xea\xde\xf3q/|\xa7q\xdd\x0ev\xeak\x021" +
	"\xeb\xa5\x95\xe2a~\xfez\x1bw/aBJ\x91\xdc" +
	"4\xef\x9b\xed\x8b+\x94\xa4\x0c\xe8\xf7O\xfd\xe5\xe7\xc7" +
	"\x1b\xf8\xbdQ\xc9x\xf78\xd7!\x7f\x9d\xb1\x0c\xec>" +
	"\xb1\xc2\xf0\xc5\xaf\xe13cl\x16\xbd$\xcf\xf2mg" +
	"e`\xdddk\x91Z]7\x1e\x0c\xe3\xd4v\xb2\xc1" +
	"\xb8K\x9a\x86\x0a\x80\x80\x80NZ\x809T4GB" +
	"MF\xf4\xd0\xee\x03\xa6\xafhr!%\xa2\x00z\xe4" +
	"Y\xaahN\x85Z1\xa2\x02\xf4\xcc\x7f\xe7\x8a\xe6L" +
	"\x18\xcf&\xd6u\xfa\xacAX\x03\x0b\x1f\xb3dd\x01" +
	",\xd9p\xb2\xd7\x9b\x0e\x8f\x17\x8c\x10\x12\x8c\x9d=I" +
	"\\\x9fU\x08\xab\xe0R_\xfd\xd5O\xedA\x92\xa6v" +
	"\x0a\xf8\x06\xc1\xb2A\xdd;\xac*\x9a\xe8\x9f\xc3O\x00" +
	"\x00\x00\xff\xff\xa8)UT"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_93814030c230a561,
		Nodes: []uint64{
			0x8a503fa7e67df7c4,
			0xf7cfb2016e0a2a00,
		},
		Compressed: true,
	})
}
